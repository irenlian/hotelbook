---
openapi: 3.0.0
info:
  title: Swagger Hotelbook
  description: |
    This is a Hotelbook server API.
  contact:
    email: ilian@star.global
  version: 1.0.0-oas3
servers:
  - url: https://hotel-booking-server-api.herokuapp.com/
tags:
  - name: test
    description: Test routes
  - name: user
    description: User data
  - name: hotel
    description: Hotel data
  - name: booking
    description: Reservation data
paths:
  /:
    get:
      tags:
        - test
      summary: Test connection
      responses:
        "200":
          description: Hello World
  /api/v1/user:
    get:
      tags:
        - user
      summary: All users list
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/v1/user/signup:
    post:
      tags:
        - user
      summary: Sign up a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            example:
              name: John
              email: jonh@gmail.com
              password: qwerty
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "400":
          description: user already exists
  /api/v1/user/login:
    post:
      tags:
        - user
      summary: Login a user to get a JWT token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthorization'
            example:
              email: jonh@gmail.com
              password: qwerty
      responses:
        "200":
          description: successful operation
          headers:
            Jwt-Authorization:
              description: A token for subsequent requests
              style: simple
              explode: false
              schema:
                type: string
        "404":
          description: there is no user with this email and password
  /api/v1/hotel:
    get:
      tags:
        - hotel
      summary: All hotels
      parameters:
        - name: from
          in: query
          description: Date of possible checkin. Is required if "to" has been specified
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date
        - name: to
          in: query
          description: Date of possible checkout. Is required if "from" has been specified
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date
        - name: minPrice
          in: query
          description: Minimum price of the cheapest room in this hotel
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: maxPrice
          in: query
          description: Minimum price of the cheapest room in this hotel
          required: false
          style: form
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hotel'
        "400":
          description: filters are invalid
  /api/v1/hotel/{hotelId}:
    get:
      tags:
        - hotel
      summary: Find a hotel by id
      parameters:
        - name: hotelId
          in: path
          description: ID of hotel to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FullHotel'
  /api/v1/hotel/room/{roomId}/booking:
    put:
      tags:
        - booking
      summary: Create or edit a reservation from the current user
      parameters:
        - name: roomId
          in: path
          description: ID of room to book
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: Jwt-Authorization
          in: header
          description: JWT token got from login
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingInput'
            example:
              roomId: 1
              checkIn: 2020-04-05
              checkOut: 2020-04-09
        required: true
      responses:
        "200":
          description: successful operation
        "404":
          description: there is no such user
        "400":
          description: there is no such room or these dates are already booked
        "401":
          description: the JWT token is incorrect
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
    Hotel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        country:
          type: string
        city:
          type: string
      xml:
        name: Hotel
    FullHotel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        country:
          type: string
        city:
          type: string
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/Room'
    Room:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
        price:
          type: integer
          format: decimal
    UserRegistration:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    UserAuthorization:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    BookingInput:
      type: object
      properties:
        roomId:
          type: integer
          format: int64
        checkIn:
          type: string
          format: date
        checkOut:
          type: string
          format: date
